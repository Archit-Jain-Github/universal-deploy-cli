#!/bin/bash

# Universal Deployment Script
# Supports Vercel, Cloudflare Pages, and Netlify
# Author: Auto-Deploy CLI Tool
# Version: 1.0.0

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    printf "${1}${2}${NC}\n"
}

# Function to print header
print_header() {
    echo ""
    print_color $CYAN "================================"
    print_color $CYAN "    Universal Deploy CLI Tool"
    print_color $CYAN "================================"
    echo ""
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install CLI tools
install_cli_tools() {
    print_color $YELLOW "Checking and installing required CLI tools..."
    
    # Check Node.js and npm
    if ! command_exists node; then
        print_color $RED "Node.js is not installed. Please install Node.js first."
        print_color $BLUE "Visit: https://nodejs.org/"
        exit 1
    fi
    
    if ! command_exists npm; then
        print_color $RED "npm is not installed. Please install npm first."
        exit 1
    fi
    
    # Install platform-specific CLI tools based on choice
    case $1 in
        "vercel")
            if ! command_exists vercel; then
                print_color $YELLOW "Installing Vercel CLI..."
                npm install -g vercel
            else
                print_color $GREEN "Vercel CLI already installed ✓"
            fi
            ;;
        "cloudflare")
            if ! command_exists wrangler; then
                print_color $YELLOW "Installing Wrangler CLI..."
                npm install -g wrangler
            else
                print_color $GREEN "Wrangler CLI already installed ✓"
            fi
            ;;
        "netlify")
            if ! command_exists netlify; then
                print_color $YELLOW "Installing Netlify CLI..."
                npm install -g netlify-cli
            else
                print_color $GREEN "Netlify CLI already installed ✓"
            fi
            ;;
    esac
}

# Function to authenticate with platforms
authenticate_platform() {
    case $1 in
        "vercel")
            print_color $YELLOW "Authenticating with Vercel..."
            if ! vercel whoami >/dev/null 2>&1; then
                vercel login
            else
                print_color $GREEN "Already authenticated with Vercel ✓"
            fi
            ;;
        "cloudflare")
            print_color $YELLOW "Authenticating with Cloudflare..."
            if ! wrangler whoami >/dev/null 2>&1; then
                print_color $BLUE "Please authenticate with Cloudflare:"
                print_color $BLUE "1. Go to https://dash.cloudflare.com/profile/api-tokens"
                print_color $BLUE "2. Create a token with 'Cloudflare Pages:Edit' permissions"
                read -p "Enter your API token: " cf_token
                echo "api_token = \"$cf_token\"" > ~/.wrangler/config/default.toml
                wrangler whoami
            else
                print_color $GREEN "Already authenticated with Cloudflare ✓"
            fi
            ;;
        "netlify")
            print_color $YELLOW "Authenticating with Netlify..."
            if ! netlify status >/dev/null 2>&1; then
                netlify login
            else
                print_color $GREEN "Already authenticated with Netlify ✓"
            fi
            ;;
    esac
}

# Function to detect project type
detect_project_type() {
    if [ -f "package.json" ]; then
        if grep -q "next" package.json; then
            echo "nextjs"
        elif grep -q "react" package.json; then
            echo "react"
        elif grep -q "vue" package.json; then
            echo "vue"
        elif grep -q "nuxt" package.json; then
            echo "nuxt"
        elif grep -q "svelte" package.json; then
            echo "svelte"
        else
            echo "nodejs"
        fi
    elif [ -f "index.html" ]; then
        echo "static"
    elif [ -f "Dockerfile" ]; then
        echo "docker"
    else
        echo "unknown"
    fi
}

# Function to configure build settings
configure_build_settings() {
    local platform=$1
    local project_type=$2
    
    print_color $YELLOW "Configuring build settings for $project_type project..."
    
    # Default build settings
    local build_command=""
    local output_dir=""
    local install_command="npm install"
    
    case $project_type in
        "nextjs")
            build_command="npm run build"
            output_dir=".next"
            ;;
        "react")
            build_command="npm run build"
            output_dir="build"
            ;;
        "vue")
            build_command="npm run build"
            output_dir="dist"
            ;;
        "nuxt")
            build_command="npm run generate"
            output_dir="dist"
            ;;
        "svelte")
            build_command="npm run build"
            output_dir="public"
            ;;
        "static")
            build_command=""
            output_dir="."
            install_command=""
            ;;
        *)
            print_color $BLUE "Custom project detected. Please provide build settings:"
            read -p "Build command (e.g., npm run build): " build_command
            read -p "Output directory (e.g., dist, build): " output_dir
            read -p "Install command (default: npm install): " custom_install
            if [ ! -z "$custom_install" ]; then
                install_command="$custom_install"
            fi
            ;;
    esac
    
    # Allow user to override defaults
    print_color $BLUE "Current settings:"
    print_color $BLUE "  Install command: $install_command"
    print_color $BLUE "  Build command: $build_command"
    print_color $BLUE "  Output directory: $output_dir"
    echo ""
    
    read -p "Do you want to modify these settings? (y/N): " modify_settings
    if [[ $modify_settings =~ ^[Yy]$ ]]; then
        read -p "Install command: " new_install
        read -p "Build command: " new_build
        read -p "Output directory: " new_output
        
        if [ ! -z "$new_install" ]; then install_command="$new_install"; fi
        if [ ! -z "$new_build" ]; then build_command="$new_build"; fi
        if [ ! -z "$new_output" ]; then output_dir="$new_output"; fi
    fi
    
    echo "$install_command|$build_command|$output_dir"
}

# Function to deploy to Vercel
deploy_vercel() {
    local build_settings=$1
    IFS='|' read -r install_cmd build_cmd output_dir <<< "$build_settings"
    
    print_color $YELLOW "Deploying to Vercel..."
    
    # Create vercel.json if it doesn't exist
    if [ ! -f "vercel.json" ]; then
        print_color $BLUE "Creating vercel.json configuration..."
        cat > vercel.json << EOF
{
  "version": 2,
  "builds": [
    {
      "src": "**/*",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "$output_dir"
      }
    }
  ]
}
EOF
    fi
    
    # Deploy with options
    read -p "Deploy to production? (y/N): " prod_deploy
    if [[ $prod_deploy =~ ^[Yy]$ ]]; then
        vercel --prod --yes
    else
        vercel --yes
    fi
    
    print_color $GREEN "Deployment completed! ✓"
}

# Function to deploy to Cloudflare Pages
deploy_cloudflare() {
    local build_settings=$1
    IFS='|' read -r install_cmd build_cmd output_dir <<< "$build_settings"
    
    print_color $YELLOW "Deploying to Cloudflare Pages..."
    
    # Get project name
    read -p "Enter project name: " project_name
    if [ -z "$project_name" ]; then
        project_name=$(basename $(pwd))
    fi
    
    # Create wrangler.toml if it doesn't exist
    if [ ! -f "wrangler.toml" ]; then
        print_color $BLUE "Creating wrangler.toml configuration..."
        cat > wrangler.toml << EOF
name = "$project_name"
compatibility_date = "2023-12-01"

[env.production]
account_id = ""
pages_build_output_dir = "$output_dir"
EOF
    fi
    
    # Build the project if build command exists
    if [ ! -z "$build_cmd" ]; then
        print_color $YELLOW "Building project..."
        if [ ! -z "$install_cmd" ]; then
            eval $install_cmd
        fi
        eval $build_cmd
    fi
    
    # Deploy to Cloudflare Pages
    wrangler pages publish $output_dir --project-name=$project_name
    
    print_color $GREEN "Deployment completed! ✓"
}

# Function to deploy to Netlify
deploy_netlify() {
    local build_settings=$1
    IFS='|' read -r install_cmd build_cmd output_dir <<< "$build_settings"
    
    print_color $YELLOW "Deploying to Netlify..."
    
    # Create netlify.toml if it doesn't exist
    if [ ! -f "netlify.toml" ]; then
        print_color $BLUE "Creating netlify.toml configuration..."
        cat > netlify.toml << EOF
[build]
  command = "$build_cmd"
  publish = "$output_dir"

[build.environment]
  NODE_VERSION = "18"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
EOF
    fi
    
    # Build and deploy
    read -p "Deploy to production? (y/N): " prod_deploy
    if [[ $prod_deploy =~ ^[Yy]$ ]]; then
        netlify deploy --prod --dir=$output_dir
    else
        netlify deploy --dir=$output_dir
    fi
    
    print_color $GREEN "Deployment completed! ✓"
}

# Function to show deployment status
show_status() {
    local platform=$1
    
    print_color $CYAN "Deployment Status:"
    
    case $platform in
        "vercel")
            if command_exists vercel; then
                vercel ls
            fi
            ;;
        "cloudflare")
            if command_exists wrangler; then
                wrangler pages project list
            fi
            ;;
        "netlify")
            if command_exists netlify; then
                netlify status
            fi
            ;;
    esac
}

# Function to show help
show_help() {
    print_header
    print_color $BLUE "Usage: deploy [OPTIONS]"
    echo ""
    print_color $YELLOW "Options:"
    print_color $GREEN "  -h, --help         Show this help message"
    print_color $GREEN "  -v, --version      Show version information"
    print_color $GREEN "  -s, --status       Show deployment status"
    print_color $GREEN "  -p, --platform     Specify platform (vercel, cloudflare, netlify)"
    echo ""
    print_color $YELLOW "Supported Platforms:"
    print_color $GREEN "  • Vercel          - Fast deployments with edge functions"
    print_color $GREEN "  • Cloudflare Pages - Global CDN with edge computing"
    print_color $GREEN "  • Netlify         - JAMstack deployments with form handling"
    echo ""
    print_color $YELLOW "Examples:"
    print_color $BLUE "  deploy                    # Interactive deployment"
    print_color $BLUE "  deploy -p vercel          # Deploy to Vercel directly"
    print_color $BLUE "  deploy --status           # Show deployment status"
    echo ""
}

# Main deployment function
main() {
    # Parse command line arguments
    PLATFORM=""
    SHOW_STATUS=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                print_color $GREEN "Universal Deploy CLI v1.0.0"
                exit 0
                ;;
            -s|--status)
                SHOW_STATUS=true
                shift
                ;;
            -p|--platform)
                PLATFORM="$2"
                shift 2
                ;;
            *)
                print_color $RED "Unknown option: $1"
                print_color $BLUE "Use 'deploy --help' for usage information"
                exit 1
                ;;
        esac
    done
    
    print_header
    
    # Show status if requested
    if [ "$SHOW_STATUS" = true ]; then
        if [ ! -z "$PLATFORM" ]; then
            show_status $PLATFORM
        else
            print_color $YELLOW "Please specify a platform with -p option"
        fi
        exit 0
    fi
    
    # Check if we're in a project directory
    if [ ! -f "package.json" ] && [ ! -f "index.html" ] && [ ! -f "Dockerfile" ]; then
        print_color $RED "No project detected in current directory."
        print_color $BLUE "Please run this command in your project root directory."
        exit 1
    fi
    
    # Platform selection
    if [ -z "$PLATFORM" ]; then
        print_color $YELLOW "Select deployment platform:"
        print_color $GREEN "1) Vercel"
        print_color $GREEN "2) Cloudflare Pages"
        print_color $GREEN "3) Netlify"
        echo ""
        read -p "Choose platform (1-3): " choice
        
        case $choice in
            1) PLATFORM="vercel" ;;
            2) PLATFORM="cloudflare" ;;
            3) PLATFORM="netlify" ;;
            *) print_color $RED "Invalid choice. Exiting."; exit 1 ;;
        esac
    fi
    
    # Validate platform
    if [[ ! "$PLATFORM" =~ ^(vercel|cloudflare|netlify)$ ]]; then
        print_color $RED "Invalid platform: $PLATFORM"
        print_color $BLUE "Supported platforms: vercel, cloudflare, netlify"
        exit 1
    fi
    
    print_color $GREEN "Selected platform: $PLATFORM"
    
    # Install required CLI tools
    install_cli_tools $PLATFORM
    
    # Authenticate with platform
    authenticate_platform $PLATFORM
    
    # Detect project type
    PROJECT_TYPE=$(detect_project_type)
    print_color $BLUE "Detected project type: $PROJECT_TYPE"
    
    # Configure build settings
    BUILD_SETTINGS=$(configure_build_settings $PLATFORM $PROJECT_TYPE)
    
    # Deploy based on platform
    case $PLATFORM in
        "vercel")
            deploy_vercel "$BUILD_SETTINGS"
            ;;
        "cloudflare")
            deploy_cloudflare "$BUILD_SETTINGS"
            ;;
        "netlify")
            deploy_netlify "$BUILD_SETTINGS"
            ;;
    esac
    
    # Show final status
    echo ""
    print_color $GREEN "🚀 Deployment completed successfully!"
    print_color $BLUE "Run 'deploy --status -p $PLATFORM' to check deployment status"
    echo ""
}

# Run main function with all arguments
main "$@"
